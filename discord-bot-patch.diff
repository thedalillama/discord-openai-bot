diff --git a/config.py b/config.py
index e021ece..f3f03ac 100644
--- a/config.py
+++ b/config.py
@@ -8,6 +8,7 @@ DEFAULT_AUTO_RESPOND = os.environ.get('AUTO_RESPOND', 'false').lower() == 'true'
 MAX_HISTORY = int(os.environ.get('MAX_HISTORY', 10))
 INITIAL_HISTORY_LOAD = int(os.environ.get('INITIAL_HISTORY_LOAD', 50))
 MAX_RESPONSE_TOKENS = int(os.environ.get('MAX_RESPONSE_TOKENS', 800))
+BOT_PREFIX = os.environ.get('BOT_PREFIX', 'Bot, ')
 CHANNEL_LOCK_TIMEOUT = 30  # Timeout for acquiring a channel lock (in seconds)

 # OpenAI configuration
 OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')
diff --git a/bot.py b/bot.py
index 5a78b13..9f4b1c3 100644
--- a/bot.py
+++ b/bot.py
@@ -10,7 +10,7 @@ import asyncio
 # Import config and utilities
 from config import (
     DEFAULT_AUTO_RESPOND, MAX_HISTORY, INITIAL_HISTORY_LOAD, 
-    MAX_RESPONSE_TOKENS, DEFAULT_SYSTEM_PROMPT, DEBUG_MODE
+    MAX_RESPONSE_TOKENS, DEFAULT_SYSTEM_PROMPT, DEBUG_MODE, BOT_PREFIX
 )
 from utils.ai_utils import generate_ai_response
 from utils.history_utils import (
@@ -95,6 +95,49 @@ def create_bot():
                 print(f"[DEBUG] Channel #{message.channel.name} already in loaded_history_channels, skipping history load")
         
         # Enhanced command filtering - skip history-related commands
+        # Check if message starts with the bot prefix
+        if message.content.lower().startswith(BOT_PREFIX.lower()):
+            if DEBUG_MODE:
+                print(f"[DEBUG] Detected prefix message: {message.content}")
+            
+            # Extract the question (remove prefix)
+            question = message.content[len(BOT_PREFIX):].strip()
+            
+            # Add the user's message to history
+            user_name = message.author.display_name
+            clean_name = ''.join(c for c in user_name if c.isalnum() or c in '_-')
+            
+            if not clean_name or clean_name != user_name:
+                channel_history[channel_id].append({
+                    "role": "user",
+                    "name": f"user_{len(channel_history[channel_id])}",
+                    "content": f"{user_name}: {message.content}"
+                })
+            else:
+                channel_history[channel_id].append({
+                    "role": "user",
+                    "name": clean_name,
+                    "content": f"{user_name}: {message.content}"
+                })
+            
+            # Generate and send response
+            async with message.channel.typing():
+                try:
+                    # Use our function to prepare messages for API
+                    messages = prepare_messages_for_api(channel_id)
+                    
+                    # Generate a response
+                    bot_response = await generate_ai_response(messages)
+                    
+                    # Send the response
+                    await message.channel.send(bot_response)
+                    
+                    # Add bot's response to the history
+                    channel_history[channel_id].append({
+                        "role": "assistant",
+                        "content": bot_response
+                    })
+                except Exception as e:
+                    error_msg = f"An error occurred: {str(e)}"
+                    await message.channel.send(error_msg)
+                    print(f"[ERROR] Error details: {e}")
+            
+            # Skip the auto-respond logic but still process other commands
+            await bot.process_commands(message)
+            return
+            
         if message.content.startswith('!'):
             # These commands should be processed but not added to history
             lowered = message.content.lower()
diff --git a/commands/history_commands.py b/commands/history_commands.py
index 6e8bfc2..d94a24e 100644
--- a/commands/history_commands.py
+++ b/commands/history_commands.py
@@ -168,36 +168,6 @@ def register_history_commands(bot):
         if history_text:
             await ctx.send(history_text)

-    @bot.command(name='ask')
-    async def ask(ctx, *, question):
-        """
-        Ask a direct question to the bot, using conversation history for context.
-        Usage: !ask [question]
-        Example: !ask What's the weather like today?
-        
-        Args:
-            question: The question to ask the bot
-        """
-        try:
-            channel_id = ctx.channel.id
-            
-            # Use our new function to prepare messages for API
-            messages = prepare_messages_for_api(channel_id)
-            
-            # Add the current question
-            messages.append({"role": "user", "content": question})
-            
-            # Generate a response using our abstracted function
-            from utils.ai_utils import generate_ai_response
-            bot_response = await generate_ai_response(messages)
-            
-            # Send the generated response back to the user
-            bot_message = await ctx.send(bot_response)
-            
-            # Add bot's response to the history
-            channel_history[channel_id].append({
-                "role": "assistant",
-                "content": bot_response
-            })
-            
-        except Exception as e:
-            await ctx.send(f"An error occurred: {str(e)}")
-            print(f"Error details: {e}")  # Log detailed error to console
-
     @bot.command(name='setprompt')
     @commands.has_permissions(administrator=True)
     async def set_prompt_cmd(ctx, *, new_prompt):
@@ -268,7 +238,6 @@ def register_history_commands(bot):
         "loadhistory": load_history_cmd,
         "cleanhistory": clean_history,
         "history": show_history,
-        "ask": ask,
         "setprompt": set_prompt_cmd,
         "getprompt": get_prompt_cmd,
         "resetprompt": reset_prompt_cmd
